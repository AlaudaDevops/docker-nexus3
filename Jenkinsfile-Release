/*
 * Copyright (c) 2016-present Sonatype, Inc. All rights reserved.
 * Includes the third-party code listed at http://links.sonatype.com/products/nexus/attributions.
 * "Sonatype" is a trademark of Sonatype, Inc.
 */
@Library(['private-pipeline-library', 'jenkins-shared']) _
import com.sonatype.jenkins.pipeline.GitHub
import com.sonatype.jenkins.pipeline.OsTools
import com.sonatype.jenkins.shared.Expectation

properties([
  parameters([
    string(defaultValue: '', description: 'New Nexus Repository Manager Version', name: 'nexus_repository_manager_version'),
    string(defaultValue: '', description: 'New Nexus Repository Manager Version Sha256', name: 'nexus_repository_manager_version_sha'),
    booleanParam(defaultValue: false, description: 'Update the latest tag', name: 'update_latest')
  ])
])

node('ubuntu-zion') {
  def commitId, commitDate, version, branch
  def organization = 'sonatype',
      credentialsId = 'jenkins-github',
      dockerHubRepository = 'nexus3'
  GitHub gitHub

  try {
    stage('Preparation') {
      deleteDir()
      OsTools.runSafe(this, "docker system prune -a -f")
      def checkoutDetails = checkout scm

      branch = checkoutDetails.GIT_BRANCH == 'origin/main' ? 'main' : checkoutDetails.GIT_BRANCH
      commitId = checkoutDetails.GIT_COMMIT
      commitDate = OsTools.runSafe(this, "git show -s --format=%cd --date=format:%Y%m%d-%H%M%S ${commitId}")

      OsTools.runSafe(this, 'git config --global user.email sonatype-ci@sonatype.com')
      OsTools.runSafe(this, 'git config --global user.name Sonatype CI')

      version = getShortVersion(params.nexus_repository_manager_version)
    }

    stage('Build, Tag, and Push Images to dockerhub') {
      def dockerfilePath = 'Dockerfile.java17'
      def baseImage = extractBaseImage(dockerfilePath)
      def baseImageRefFactory = load 'scripts/BaseImageReference.groovy'
      def baseImageReference = baseImageRefFactory.build(this, baseImage as String)
      def baseImageReferenceStr = baseImageReference.getReference()
      withCredentials([[$class: 'UsernamePasswordMultiBinding',
                                credentialsId: 'docker-hub-credentials',
                                usernameVariable: 'DOCKERHUB_API_USERNAME',
                                passwordVariable: 'DOCKERHUB_API_PASSWORD']]) {
        OsTools.runSafe(this, "docker buildx create --driver-opt=\"image=moby/buildkit\" --use")
        OsTools.runSafe(this, """
            docker login --username ${env.DOCKERHUB_API_USERNAME} --password ${env.DOCKERHUB_API_PASSWORD}
         """)

        def buildUbiImage = """
            docker buildx build \
              --platform linux/amd64,linux/arm64 \
              --label base-image-ref='${baseImageReferenceStr}' \
              --push \
              --no-cache \
              --tag ${organization}/${dockerHubRepository}:${version} \
              --tag ${organization}/${dockerHubRepository}:${version}-ubi \
              --tag ${organization}/${dockerHubRepository}:${version}-java17-ubi \
              """
        if(params.update_latest) {
          buildUbiImage += "--tag ${organization}/${dockerHubRepository}:latest \"
        }
        buildUbiImage += "-f ${dockerfilePath} ."
        def hash = OsTools.runSafe(this, buildUbiImage)

        // Build Alpine Image
        def alpineDockerfilePath = 'Dockerfile.alpine.java17'
        def alpineHash = OsTools.runSafe(this, """
        docker buildx build \
          --platform linux/amd64,linux/arm64 \
          --push \
          --no-cache \
          --tag ${organization}/${dockerHubRepository}:${version}-java17-alpine \
          --tag ${organization}/${dockerHubRepository}:${version}-alpine \
          -f ${alpineDockerfilePath} .""")
      }

      if (currentBuild.result == 'FAILURE') {
        gitHub.statusUpdate commitId, 'failure', 'build', 'Build failed'
        return
      } else {
        gitHub.statusUpdate commitId, 'success', 'build', 'Build succeeded'
      }
    }

    if (currentBuild.result == 'FAILURE') {
          return
    }

    if (params.update_latest) {
      stage('Push README changes to dockerhub') {
        def dockerhubApiToken

        withCredentials([[$class: 'UsernamePasswordMultiBinding',
                          credentialsId: 'docker-hub-credentials',
                          usernameVariable: 'DOCKERHUB_API_USERNAME',
                          passwordVariable: 'DOCKERHUB_API_PASSWORD']]) {

          response = OsTools.runSafe(this, """
            curl -X POST https://hub.docker.com/v2/users/login/ \
              -H 'cache-control: no-cache' -H 'content-type: application/json' \
              -d '{ "username": "${env.DOCKERHUB_API_USERNAME}", "password": "${env.DOCKERHUB_API_PASSWORD}" }'
          """)
          token = readJSON text: response
          dockerhubApiToken = token.token

          def readme = readFile file: 'README.md', encoding: 'UTF-8'
          readme = readme.replaceAll("(?s)<!--.*?-->", "")
          readme = readme.replace("\"", "\\\"")
          readme = readme.replace("\n", "\\n")
          response = httpRequest customHeaders: [[name: 'authorization', value: "JWT ${dockerhubApiToken}"]],
              acceptType: 'APPLICATION_JSON', contentType: 'APPLICATION_JSON', httpMode: 'PATCH',
              requestBody: "{ \"full_description\": \"${readme}\" }",
              url: "https://hub.docker.com/v2/repositories/${organization}/${dockerHubRepository}/"
        }
      }

    }

  } finally {
    OsTools.runSafe(this, "docker logout")
    OsTools.runSafe(this, "docker system prune -a -f")
    OsTools.runSafe(this, 'git clean -f && git reset --hard origin/main')
  }
}

def getShortVersion(version) {
  return version.split('-')[0]
}

def extractBaseImage (dockerFileLocation) {
  def dockerFile = readFile(file: dockerFileLocation)
  def baseImageRegex = "FROM\\s+([^\\s]+)"
  def usedImages = dockerFile =~ baseImageRegex

  return usedImages[0][1]
}
