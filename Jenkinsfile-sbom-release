@Library(['private-pipeline-library', 'jenkins-shared']) _

import com.sonatype.jenkins.pipeline.OsTools

import groovy.json.JsonSlurper

IQ_URL_BASE = "https://sonatype.sonatype.app/platform"
REPO_BASE_URL = "https://repo.sonatype.com/service/rest"
TARGET_REPO_NAME = "sonatype-sboms"
REDHAT_SBOM_REPO_URL_BASE = "https://access.redhat.com/security/data/sbom/beta"
REDHAT_CONTAINER_API_URL_BASE = "https://catalog.redhat.com/api/containers/v1"
CYCLONEDX_VERSION = "1.5"

properties([
    parameters([
        string(name: 'docker_nexus3_tag', defaultValue: '',
            description: 'Nexus Repository Manager Version. The result SBOMs will be tagged with this version.')
    ])
])


node('ubuntu-zion') {
  def buildDir = "./.sbom-build/job-${env.BUILD_NUMBER}"
  def ubiImageName = ''
  def ubiImageVersion = ''
  def nexusVersion = ''
  def dockerImageVersion = ''
  def ubiSbomAvailable = true

  try {
    stage('Inspect Release Image') {
      // Get RedHat UBI version
      sh "docker pull sonatype/nexus3:${params.docker_nexus3_tag}"

      nexusVersion = sh(script: "docker inspect sonatype/nexus3:${params.docker_nexus3_tag} \
          | jq -r '.[0].Config.Labels.version' ",
          returnStdout: true).trim()
      dockerImageVersion = sh(script: "docker inspect sonatype/nexus3:${params.docker_nexus3_tag} \
          | jq -r '.[0].Config.Labels.release' ",
          returnStdout: true).trim()

      def ubiImageId = sh(script: "docker inspect sonatype/nexus3:${params.docker_nexus3_tag} \
          | jq -r '.[0].Config.Labels.\"base-image-ref\"' \
          | sed -En 's/^.+image=(.+)\$/\\1/p'",
        returnStdout: true).trim()

      ubiImageName = sh(script: "curl -s -X 'GET' '${REDHAT_CONTAINER_API_URL_BASE}/images/id/${ubiImageId}' -H 'accept: application/json' \
          | jq -r '.brew.build' \
          | sed -En 's/(ubi[0-9]+-minimal)-container-([0-9]+\\.[0-9]+-[0-9]+\\.?[0-9]*)/\\1-\\2/p'",
        returnStdout: true).trim()

      ubiImageVersion = sh(script: "curl -s -X 'GET' '${REDHAT_CONTAINER_API_URL_BASE}/images/id/${ubiImageId}' -H 'accept: application/json' \
          | jq -r '.brew.build' \
          | sed -En 's/ubi[0-9]+-minimal-container-([0-9]+\\.[0-9]+-[0-9]+\\.?[0-9]*)/\\1/p'",
        returnStdout: true).trim()
    }
    stage('Download SBOMs') {
      sh "mkdir -p ${buildDir}/spdx && mkdir -p ${buildDir}/cyclonedx"

      // Get nexus-internal SBOM
      getComponentSbom(buildDir, "nexus-internal", nexusVersion)
      // Get nxrm-db-migrator SBOM
      getComponentSbom(buildDir, "nxrm-db-migrator", nexusVersion)
      // Get docker-nexus3 SBOM
      getComponentSbom(buildDir, "docker-nexus3", dockerImageVersion)
      // Get UBI Minimal SBOM
      ubiSbomAvailable = getUbiImageSbom(buildDir, ubiImageName, ubiImageVersion)

      sh "echo 'Available SPDX SBOMS' && ls ${buildDir}/spdx"
      sh "echo 'Available CycloneDx SBOMS' && ls ${buildDir}/cyclonedx"
    }

    stage('Merge supported sboms') {
      def pythonEnvDir = "${buildDir}/.spdxmerge"

      sh """#!/bin/bash
        if ! [ -d "${buildDir}/SPDXMerge" ]; then
          git clone https://github.com/philips-software/SPDXMerge.git '${buildDir}/SPDXMerge'
        fi
      """

      sh """#!/bin/bash
      if mkdir -p '${pythonEnvDir}' && python3 -m venv '${pythonEnvDir}' && ls '${pythonEnvDir}' && . '${pythonEnvDir}/bin/activate'; then
        if python3 -m pip install -r '${buildDir}/SPDXMerge/requirements.txt' \
            && python3 -m pip install setuptools \
            && python3 '${buildDir}/SPDXMerge/spdxmerge/SPDXMerge.py' --docpath '${buildDir}/spdx' --outpath '${buildDir}/' \
                --name "docker-nexus3-aggregate" --mergetype "1" --author "Sonatype Inc." --email "support@sonatype.com" \
                --docnamespace "https://sonatype.sonatype.app/platform/ui/links/application/docker-nexus3/report/b0c5f7f12ac84b439ded3ff255bd5eef" \
                --filetype J \
            && mv '${buildDir}/merged-SBoM-deep.json' '${buildDir}/spdx/docker-nexus3-aggregate-${dockerImageVersion}-spdx.json'; then
          echo 'Merge completed!'
        else
        echo 'Merge failed!'
          FAILED=1
        fi

        deactivate
      fi

      exit \${FAILED:-0}
      """
    }

    stage('Publish SBOMs') {
      if (ubiSbomAvailable) {
        publishComponent(buildDir, "ubi-minimal", ubiImageVersion, false)
      }
      publishComponent(buildDir, "nexus-internal", nexusVersion)
      publishComponent(buildDir, "nxrm-db-migrator", nexusVersion)
      publishComponent(buildDir, "docker-nexus3", dockerImageVersion)
      publishComponent(buildDir, "docker-nexus3-aggregate", dockerImageVersion, false)
    }
  } finally {
    OsTools.runSafe(this, "rm -rf '${buildDir}'")
  }
}

def getComponentSbom(String buildDir, String componentName, String componentVersion) {
  def componentInfo = getComponentInfo(componentName)
  def componentId = componentInfo.applications[0].id

  withCredentials([
      usernamePassword(
          credentialsId: 'jenkins-saas-service-acct',
          usernameVariable: 'IQ_USER',
          passwordVariable: 'IQ_PASSWORD')
  ]) {
    // Get SPDX
    sh "curl -s -L -w 'Status: %{http_code}' -u \$IQ_USER:\$IQ_PASSWORD -o '${buildDir}/spdx/${componentName}-${componentVersion}-spdx.json' -X GET \
      -H 'Accept: application/json' '${IQ_URL_BASE}/api/v2/spdx/${componentId}/stages/release?format=json'"
    // Get CycloneDx
    sh "curl -s -L -w 'Status: %{http_code}' -u \$IQ_USER:\$IQ_PASSWORD -o '${buildDir}/cyclonedx/${componentName}-${componentVersion}-cyclonedx.json' -X GET \
      -H 'Accept: application/json' '${IQ_URL_BASE}/api/v2/cycloneDx/${CYCLONEDX_VERSION}/${componentId}/stages/release'"
  }
}

def getUbiImageSbom(String buildDir, String ubiMinimalName, String ubiMinimalVersion) {
  // Get ubi-minimal SBOM (as RedHat SBOM repo is still in beta, this has to be optional)
  def httpStatus = sh(
      script: "curl -s -w \"%{http_code}\" \
              -X GET ${REDHAT_SBOM_REPO_URL_BASE}/spdx/${ubiMinimalName}.json.bz2 \
              -o '${buildDir}/spdx/ubi-minimal-${ubiMinimalVersion}.json.bz2'",
      returnStdout: true)

  if (!"200".equals(httpStatus)) {
    echo """ Error ${httpStatus}: Could not load UBI minimal SBOM version ${ubiMinimalVersion}.
        This could happen because RedHat SBOM repo is still in beta. UBI SBOM will be skipped.
        Please visit https://access.redhat.com/security/data for further information.
        """

    sh "rm '${buildDir}/spdx/ubi-minimal-${ubiMinimalVersion}.json.bz2'"

    return false
  } else {
    sh "(cd ${buildDir}/spdx && bzip2 -d 'ubi-minimal-${ubiMinimalVersion}.json.bz2')"
    return true
  }
}

def getComponentInfo(String componentName) {
  def jsonSlurper = new JsonSlurper()
  def response = null

  withCredentials([
      usernamePassword(
          credentialsId: 'jenkins-saas-service-acct',
          usernameVariable: 'IQ_USER',
          passwordVariable: 'IQ_PASSWORD')
  ]) {
    def rawResponse = sh(returnStdout: true, script: "curl -s -u \$IQ_USER:\$IQ_PASSWORD -X GET '${IQ_URL_BASE}/api/v2/applications?publicId=${componentName}'")
    response = jsonSlurper.parseText(rawResponse)
  }
}

def publishComponent(String buildDir, String componentName, String componentVersion, boolean cyclonedxAvailable = true) {
  def publishCommand = "curl -v -s -w 'Status: %{http_code}' -u \$NXRM_USER:\$NXRM_PASSWORD -X POST '${REPO_BASE_URL}/v1/components?repository=${TARGET_REPO_NAME}' \
    -F 'raw.directory=/${componentName}/${componentVersion}/' \
    -F 'raw.asset1=@${buildDir}/spdx/${componentName}-${componentVersion}-spdx.json' \
    -F 'raw.asset1.filename=${componentName}-${componentVersion}-spdx.json'"

  if (cyclonedxAvailable) {
    publishCommand = "${publishCommand} \
      -F 'raw.asset2=@${buildDir}/cyclonedx/${componentName}-${componentVersion}-cyclonedx.json' \
      -F 'raw.asset2.filename=${componentName}-${componentVersion}-cyclonedx.json'"
  }

  withCredentials([
      usernamePassword(
          credentialsId: 'sonatype-sbom-deployer',
          usernameVariable: 'NXRM_USER',
          passwordVariable: 'NXRM_PASSWORD')
  ]) {
    sh(publishCommand)
  }
}