/*
 * Copyright (c) 2016-present Sonatype, Inc. All rights reserved.
 * Includes the third-party code listed at http://links.sonatype.com/products/nexus/attributions.
 * "Sonatype" is a trademark of Sonatype, Inc.
 */
@Library(['private-pipeline-library', 'jenkins-shared']) _

String OPENJDK8 = 'OpenJDK 8'
String OPENJDK11 = 'OpenJDK 11'
String OPENJDK17 = 'OpenJDK 17'
List<String> javaVersions = [OPENJDK8, OPENJDK11, OPENJDK17]

properties([
  parameters([
    string(name: 'version', description: 'Version tag to apply to the image, like 3.41.0-ubi-1.'),
    choice(name: 'java_version', choices: javaVersions, description: 'Java version to run Nexus Repository Manager')
  ]),
])

node('ubuntu-zion') {
  try {
    stage('Preparation') {
      deleteDir()

      checkout scm

      sh 'docker system prune -a -f'
      sh '''
        wget -q -O preflight \
          https://github.com/redhat-openshift-ecosystem/openshift-preflight/releases/download/1.9.4/preflight-linux-amd64
        chmod 755 preflight
      '''
    }
    stage('Build') {
      withCredentials([
        usernamePassword(
            credentialsId: 'red-hat-quay-nexus-repository-manager',
            usernameVariable: 'REGISTRY_LOGIN',
            passwordVariable: 'REGISTRY_PASSWORD'),
        string(
            credentialsId: 'red-hat-api-token',
            variable: 'API_TOKEN')
      ]) {
        def dockerfilePath = 'Dockerfile.rh.ubi'
        if (params.java_version == OPENJDK11) {
          dockerfilePath = 'Dockerfile.rh.ubi.java11'
        }

        def baseImage = extractBaseImage(dockerfilePath)
        def baseImageRefFactory = load 'scripts/BaseImageReference.groovy'
        def baseImageReference = baseImageRefFactory.build(this, baseImage as String)
        def baseImageReferenceStr = baseImageReference.getReference()
        if (params.java_version == OPENJDK11) {
          sh "PATH='\$PATH:.' VERSION=${version} DOCKERFILE=${dockerfilePath} BASE_IMG_REF=${baseImageReferenceStr} ./build_red_hat_image_for_java11.sh"
        } else {
          sh "PATH='\$PATH:.' VERSION=${version} DOCKERFILE=${dockerfilePath} BASE_IMG_REF=${baseImageReferenceStr} ./build_red_hat_image.sh"
        }
      }
    }
  } finally {
    sh 'docker logout'
    sh 'docker system prune -a -f'
    sh 'git clean -f && git reset --hard origin/main'
  }
}

def extractBaseImage (dockerFileLocation) {
  def dockerFile = readFile(file: dockerFileLocation)
  def baseImageRegex = "FROM\\s+([^\\s]+)"
  def usedImages = dockerFile =~ baseImageRegex

  return usedImages[0][1]
}