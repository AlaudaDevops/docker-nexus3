/*
 * Copyright (c) 2016-present Sonatype, Inc. All rights reserved.
 * Includes the third-party code listed at http://links.sonatype.com/products/nexus/attributions.
 * "Sonatype" is a trademark of Sonatype, Inc.
 */
@Library(['private-pipeline-library', 'jenkins-shared']) _
import com.sonatype.jenkins.pipeline.OsTools

String OPENJDK8 = 'OpenJDK 8'
String OPENJDK11 = 'OpenJDK 11'
List<String> javaVersions = [OPENJDK8, OPENJDK11]
String RED_HAT_REGISTRY = "registry.access.redhat.com"

properties([
    parameters([
        string(defaultValue: '', description: 'New Nexus Repository Manager Version', name: 'nexus_repository_manager_version'),
        string(defaultValue: '', description: 'New Nexus Repository Manager URL (Optional)', name: 'nexus_repository_manager_url'),
        choice(name: 'java_version', choices: javaVersions, description: 'Java version to run Nexus Repository Manager'),
        booleanParam(defaultValue: false, description: 'Optional scan for policy violations', name: 'scan_for_policy_violations')
    ])
])

node('ubuntu-zion') {
  def commitId, commitDate, version, imageId, branch
  def imageName = 'sonatype/nexus3',
      archiveName = 'docker-nexus3'

  try {
    stage('Preparation') {
      deleteDir()
      OsTools.runSafe(this, "docker system prune -a -f")

      def checkoutDetails = checkout scm

      branch = checkoutDetails.GIT_BRANCH == 'origin/main' ? 'main' : checkoutDetails.GIT_BRANCH
      commitId = checkoutDetails.GIT_COMMIT
      commitDate = OsTools.runSafe(this, "git show -s --format=%cd --date=format:%Y%m%d-%H%M%S ${commitId}")

      OsTools.runSafe(this, 'git config --global user.email sonatype-ci@sonatype.com')
      OsTools.runSafe(this, 'git config --global user.name Sonatype CI')

      version = readVersion()

      if (params.nexus_repository_manager_version) {
        stage('Update Repository Manager Version') {
          OsTools.runSafe(this, "git checkout ${branch}")
          updateRepositoryManagerVersion("${pwd()}/Dockerfile", 'java8')
          updateRepositoryManagerVersion("${pwd()}/Dockerfile.java11", 'java11')
          version = getShortVersion(params.nexus_repository_manager_version)
        }
      }
    }
    stage('Build') {
      def dockerfilePath = 'Dockerfile'
      if (params.java_version == OPENJDK11) {
        dockerfilePath = 'Dockerfile.java11'
      }
      def baseImage = extractBaseImage(dockerfilePath)
      OsTools.runSafe(this, "docker pull ${baseImage}")
      def baseImageRef = getRedHatCatalogReference(baseImage, RED_HAT_REGISTRY)
      if (baseImageRef == null) {
        baseImageRef = baseImage
      }
      def hash = OsTools.runSafe(this, "docker build --quiet --label base-image-ref='${baseImageRef}' --no-cache --tag ${imageName} . -f ${dockerfilePath}")
      imageId = hash.split(':')[1]
    }
    if (params.scan_for_policy_violations) {
      stage('Evaluate Policies') {
        runEvaluation({ stage ->
          nexusPolicyEvaluation(
              iqStage: stage,
              iqApplication: 'docker-nexus3',
              iqScanPatterns: [[scanPattern: "container:${imageName}"]],
              failBuildOnNetworkError: true,
          )}, 'release')
      }
    }
    if (currentBuild.result == 'FAILURE') {
      return
    }
    stage('Archive') {
      dir('build/target') {
        OsTools.runSafe(this, "docker save ${imageName} | gzip > ${archiveName}.tar.gz")
        archiveArtifacts artifacts: "${archiveName}.tar.gz", onlyIfSuccessful: true
      }
    }
    if (branch == 'main') {
      stage('Push image to RSC') {
        withSonatypeDockerRegistry() {
          if (params.java_version == OPENJDK11) {
            sh "docker tag ${imageId} docker-all.repo.sonatype.com/sonatype-internal/nexus3:${version}-java11"
            sh "docker push docker-all.repo.sonatype.com/sonatype-internal/nexus3:${version}-java11"
          } else {
            sh "docker tag ${imageId} docker-all.repo.sonatype.com/sonatype-internal/nexus3:${version}"
            sh "docker push docker-all.repo.sonatype.com/sonatype-internal/nexus3:${version}"
            sh "docker tag ${imageId} docker-all.repo.sonatype.com/sonatype-internal/nexus3:${version}-java8"
            sh "docker push docker-all.repo.sonatype.com/sonatype-internal/nexus3:${version}-java8"
          }
        }
      }
    }
  } finally {
    OsTools.runSafe(this, "docker logout")
    OsTools.runSafe(this, "docker system prune -a -f")
    OsTools.runSafe(this, 'git clean -f && git reset --hard origin/main')
  }
}

def readVersion() {
  def content = readFile 'Dockerfile'
  for (line in content.split('\n')) {
    if (line.startsWith('ARG NEXUS_VERSION=')) {
      return getShortVersion(line.substring(18))
    }
  }
  error 'Could not determine version.'
}

def getShortVersion(version) {
  return version.split('-')[0]
}

def updateRepositoryManagerVersion(dockerFileLocation, javaVersion) {
  def dockerFile = readFile(file: dockerFileLocation)

  def metaVersionRegex = /(version=")(\d\.\d{1,3}\.\d\-\d{2})(" \\)/
  def metaShortVersionRegex = /(release=")(\d\.\d{1,3}\.\d)(" \\)/

  def versionRegex = /(ARG NEXUS_VERSION=)(\d\.\d{1,3}\.\d\-\d{2})/
  def shaRegex = /(ARG NEXUS_DOWNLOAD_SHA256_HASH=)([A-Fa-f0-9]{64})/

  dockerFile = dockerFile.replaceAll(metaVersionRegex, "\$1${params.nexus_repository_manager_version}\$3")
  dockerFile = dockerFile.replaceAll(metaShortVersionRegex,
      "\$1${params.nexus_repository_manager_version.substring(0, params.nexus_repository_manager_version.indexOf('-'))}\$3")
  dockerFile = dockerFile.replaceAll(versionRegex, "\$1${params.nexus_repository_manager_version}")

  def nexusUrlRegex = /(ARG NEXUS_DOWNLOAD_URL=)(.*)/
  def nexusUrl = params.nexus_repository_manager_url
  if (params.nexus_repository_manager_url) {
    dockerFile = dockerFile.replaceAll(nexusUrlRegex, "\$1${params.nexus_repository_manager_url}")
  }
  else {
    // default URL
    def defaultUrl = /https:\/\/download-staging.sonatype.com\/nexus\/3\/nexus-\$\{NEXUS_VERSION\}-\$\{JAVA_VERSION\}-unix\.tar\.gz/
    dockerFile = dockerFile.replaceAll(nexusUrlRegex, "\$1${defaultUrl}")

    def normalizedUrl = "a".replaceAll(/./, "${defaultUrl}")
    nexusUrl = normalizedUrl.replace("\${NEXUS_VERSION}", params.nexus_repository_manager_version)
    nexusUrl = nexusUrl.replace("\${JAVA_VERSION}", javaVersion)
  }
  def sha = getSha(nexusUrl)

  dockerFile = dockerFile.replaceAll(shaRegex, "\$1${sha}")

  writeFile(file: dockerFileLocation, text: dockerFile)

}

def getSha(url) {
  def sha = sh (
      script: "curl -s -L ${url} | shasum -a 256 | cut -d' ' -f1",
      returnStdout: true
  ).trim()
  return sha
}

def extractBaseImage (dockerFileLocation) {
  def dockerFile = readFile(file: dockerFileLocation)
  def baseImageRegex = "FROM\\s+([^\\s]+)"
  def usedImages = dockerFile =~ baseImageRegex

  return usedImages[0][1]
}

def getRedHatCatalogReference(baseImage, registryName) {
  def repoName = extractRedHatRepoName(baseImage, registryName)
  def dockerImageId = getDockerImageId(baseImage)
  if(repoName == null || dockerImageId == null) {
    return null
  }

  def imageId = getRedHatImageId(dockerImageId)
  def repoId = getRedHatRepoId(repoName, registryName)
  if(imageId == null || repoId == null) {
    return "Base Image: ${baseImage} - Docker Image ID: ${dockerImageId}"
  }

  def imageArch = sh (
      script: "docker image inspect ${baseImage} | jq -r '.[0].Architecture' ",
      returnStdout: true
  ).trim()
  imageArch == "null" ? null : imageArch

  if (imageArch != null) {
    return "https://catalog.redhat.com/software/containers/${repoName}/${repoId}?architecture=${imageArch}&image=${imageId}"
  } else {
    return "https://catalog.redhat.com/software/containers/${repoName}/${repoId}?image=${imageId}"
  }
}

def extractRedHatRepoName(baseImage, registryName) {
  if(!baseImage.contains(registryName)) {
    return null
  }
  def repositoryRegex = "${registryName}\\/(.*)"
  def repository = (baseImage =~ repositoryRegex)[0][1]
  return repository
}

def getDockerImageId(baseImage) {
  def dockerImageId = sh (
      script: "docker image inspect ${baseImage} | jq -r '.[0].Id' ",
      returnStdout: true
  ).trim()

  return dockerImageId == "null" ? null : dockerImageId
}

def getRedHatImageId (dockerImageId) {
  def imageSearchUrl =
      "https://catalog.redhat.com/api/containers/v1/images?filter=docker_image_id==\"${dockerImageId}\""
  def imageId = sh (
      script: "curl -s -L ${imageSearchUrl} | jq -r '.data[0]._id' ",
      returnStdout: true
  ).trim()

  return imageId == "null" ? null : imageId
}

def getRedHatRepoId (repoName, registryName) {
  def repoSearchUrl =
      "https://catalog.redhat.com/api/containers/v1/repositories/registry/${registryName}/repository/${repoName}"
  def repoId = sh (
      script: "curl -s -L ${repoSearchUrl} | jq -r '._id' ",
      returnStdout: true
  ).trim()

  return repoId == "null" ? null : repoId
}